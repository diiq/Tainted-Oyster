quoted ← '((... 'args) args)

list ← '((... args) args)

unary-λ ← quoted:
    ('args)
    oif (atom-p args):
        args ← list args
    quoted:
        (... 'code)
        list args @code

unary-\ ← unary-λ

#--------------------------------------------------------------#
print: quoted Cons car cdr and fn tests.

print: car: 't :: ()

print: car: 
    (λb: 't :: b :: ()) 'a

print: car: cdr:
    ((λb: \a: a :: b :: ()) 't) 'b


#--------------------------------------------------------------#
print: quoted Scope and leaking tests.

print: a ← 't

print: a
print: (λ('b) b) t
print: (λ('b) b): really a

b ← 'b
print: (λb b) 't

print: *((λa: leak a 'a) 'b :: ())

#--------------------------------------------------------------#
print: quoted oif tests.

print: oif 'a 't 'a
print: oif () 'a 't

#--------------------------------------------------------------#
print: quoted Elipsis argument tests.

print: car: (λ(... 'b) b) t e a q
print: car: car: (λ(... 'b) b): really: 't :: 'a :: ()

#--------------------------------------------------------------#
print: quoted Signal handling tests.

print: with-signal-handler:
    \x: car x
    signal 't

Y ← λf: (λx: f: x x): λx: f: x x
print Y
        