(set! def (' (((' name) ... (' code)) (leak (just name)) (set! (just name) code))))
(def fn (... (' code)) code)


(print (' (cons car cdr and fn tests)))

(print (car (cons (' t) ())))
(print (car ((fn (b) (cons (' t) (cons b ()))) (' a))))
(print (car (cdr (((fn (b) (fn (a) (cons a (cons b ())))) (' t)) (' b)))))


(print (' (Scope and leaking tests)))
(print (set! a (' t)))
(print a)
(print ((fn ((' b)) b) t))
(print ((fn ((' b)) b) (just a)))

(set! a (' b))
(print ((fn (a) a) (' t)))

(set! a (' t))
(print (* (cons ((fn (a) (leak a (' a))) (' b)) ())))

(print (' (oif tests)))
(print (oif (' a) (' t) (' a)))
(print (oif () (' a) (' t)))

(print (' ( elipsis args tests)))
(print (car ((fn (... (' b)) b) t a e q)))
(print (car (car ((fn (... (' b)) b) (just (cons (' t) (cons (' a) ())))))))

