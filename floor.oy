quoted ← '((... 'args) args)

list ← '((... args) args)

unary-λ ← quoted:
    ('args)
    oif (atom args):
        args ← list args
    quoted:
        (... 'code)
        list args @code

do ← λ(... 'code):
    ((λ(): *code))

eval ← λ(code):
    do: really code

unary-, ← eval

then ← do
else ← do
if ← oif

not ← λx: if x () 't

map ← λ(f list):
    if list:
        f (car list) :: map f (cdr list)

foreach ← λ('member alist ... 'code):
    map: 
        λ(really member): *code
        alist

while ← λ('test ... 'code):
    if ,test:
        then:
            map unary-, code
            while (really test) *code

set! ← set

set ← λ('thing value):
    if (not: atom thing):
        then:
            call ← ,(car thing)
            setter ← call.set
            if setter: 
                setter *(cdr thing) value
                signal: list 'no-known-setter-for thing
        else:
            leak (really thing)
            set! (really thing) value

table-set:
    set
    info-table table-get
    table-set

#-------------------------------------------------------------#
# Playground

foreach q '(a b c d e f):
    print q

a <- '(a b c d e)
while a: 
      print: car a
      a <- cdr a

print: if () () 't

print: if 't 't ()

if ():
    then:
        print 'hello
    else:
        print 'there


baby ← 'foo
print baby.fee
baby.fee ← 'one-hundred-dollars
print baby.fee