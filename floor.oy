quoted ← '((... 'args) args)

list ← '((... args) args)

unary-λ ← quoted:
    ('args)
    oif (atom args):
        args ← list args
    quoted:
        (... 'code)
        list args @code

unary-\ ← unary-λ

do ← λ(... 'code):
    ((λ(): *code))

eval ← λ(code):
    do: really code

unary-, ← eval

then ← do
else ← do
if ← oif

not ← λx: if x () 't

map ← λ(f list):
    if list:
        f (car list) :: map f (cdr list)

foreach ← λ('member alist ... 'code):
    map: 
        λ(really member): *code
        alist

while ← λ('test ... 'code):
    if ,test:
        then:
            map unary-, code
            while (really test) *code

set! ← set

set ← λ('thing value):
    if (not: atom thing):
        then:
            call ← ,(car thing)
            if call.set: 
                call.set *(cdr thing) value
                signal: list 'no-known-setter-for thing
        else:
            leak (really thing)
            set! (really thing) value

table-set:
    set
    info-table table-get
    table-set


#-------------------------------------------------------------#
# Playground

foreach q '(a b c d e f):
    print q

a ← '(a b c d e)
while a: 
      print: car a
      a ← cdr a

print: if () () 't

print: if 't 't ()

if ():
    then:
        print 'hello
    else:
        print 'there


baby ← 'foo
print baby.fee
baby.fee ← 'one-hundred-dollars
print baby.fee


make-account ← λbalance:
    account ← 'account
    account.type ← 'account

    account.withdraw ← λamount:
        if (not balance):
            then:
                'Insufficient-funds
            else:
                balance ← amount

    account.deposit ← λ():
        balance
    
    balance ← 'amount
    account

acc ← make-account 'loo
print (acc.deposit)
acc.withdraw 'poo
print (acc.deposit)
acc.withdraw ()

print: quoted final answer

# class ← λ('name 'args ... 'members):
#     leak: really name
#     really name ← λ(really args):
#         return ← name
#         #        return.type ← name
#         print return
#         map:
#             λm:
#                 print return
#                 # print return.(really: car m)
#                 print: λ(really: car: cdr m): *(cdr: cdr m)
#             members
#         return

# class maccount (balance):
#     withdrawl amount:
#         if balance:
#             balance ← amount
#             'insufficient-funds

#     deposit amount:
#         balance

# macc ← maccount 'see

# print macc

# print macc.deposit 
# macc.withdraw 'poo 
# print macc.deposit 
# macc.withdraw ()
# print: macc.withdraw ()


