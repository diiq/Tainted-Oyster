include "oy/floor.oy"

#--------- Real parser ----------

def make-parse-state (recursion-list stack):
    ret ← new 'foo
    ret.stack ← stack
    ret.recursion-list ← recursion-list
    ret

def stack-of (state):
    second state.stack

def parse-success (value stream):
    ret ← new 'parsed-success
    ret.stream ← stream
    ret.value ← value 
    ret

def thing-match thing:
    λ(stream state):
        if (first stream == thing):
            then:
                print "MATCHED!"
                parse-success thing (rest stream)

def and-match (... 'parsers):
    λ(stream state):
        success-stream ← stream
        def attempt (parser):
            rec ← apply-rule parser success-stream state
            if rec:
                then: 
                    success-stream ← rec.stream 
                    rec.value
                signal 'fail
        with-signal-handler:
            λx: 
                if (first x == 'fail): 
                    ()
                    unhandle-signal x
            parse-success: 
                map attempt parsers
                success-stream

def or-match (... 'parsers):
    λ(stream state):
        def attempt (parser):
            rec ← apply-rule parser stream state
            if rec: signal rec
        with-signal-handler:
            λx: if (first x == 'parsed-success): 
                first x
                unhandle-signal x
            map attempt parsers
            ()

def many-match ('parser):
    λ(stream state):
        ret ← ()
        cur ← ()
        #print "many match stack:" state.stack
        while (cur ← apply-rule parser stream state):
            #print "many match stack:" state.stack
            stream ← cur.stream
            ret ← cur.value :: ret
        parse-success: 
            reverse ret
            stream

def anything (stream state):
    parse-success:
        first stream
        rest stream

def not-match ('parser):
    λ(stream state):
        if (apply-rule parser stream state):
            ()
            anything stream
    
def list-match ('parser):
    λ(stream state):
        apply-rule parser (first stream) state

def string-match (string):
    and-match:
        *(string-map1 thing-match string)

def apply-rule (rule stream state):
    head ← if state.recursion-list: first state.recursion-list
    cond:
        !stream:
            ()

        # if the rule is the recursion-head,
        (and head (first head == rule) (second head == stream)):
            val ← stream.(really rule)
            stream.(really rule)

        # if the rule is in the recursion-list, apply the rule no matter what 
        (assoc rule state.recursion-list == stream):
            ret ← ,rule stream: make-parse-state:
                state.recursion-list
                acons rule stream: state.stack
            if (stream.(really rule) && !ret):
                stream.(really rule)
                ret

                # if the rule is the recusion-head encountered for the first time,
        # do some stuff.
        (stream.(really rule) == 'still-active):
            ret ← new 'recursed
            ret.recursion-list ← state.stack
            stream.(really rule) ← ret
            ()

        # Otherwise, if there's a memoized answer, return that.
        stream.(really rule):
            stream.(really rule)

        # If nothing else, apply the rule and memoize...
        't:
            print rule
            stream.(really rule) ← 'still-active
            ret ← ,rule stream: make-parse-state:
                state.recursion-list
                acons rule stream: state.stack

            didrec ← stream.(really rule)
            
            stream.(really rule) ← ret
            #then check for recursion.
            if (didrec == 'recursed):
                then:
                    prev ← ()
                    pvalue ← ()
                    while !(pvalue == ret.stream):
                        stream.(really rule) ← ret
                        prev ← parse-success ret.value ret.stream
                        pvalue ← prev.stream
                        ret ← ,rule stream: make-parse-state:
                            acons rule stream didrec.recursion-list
                            acons rule stream state.stack
                        
            ret

def parse ('rule file):
    ret ← apply-rule rule file: make-parse-state () ()
    ret.value

aspace ← thing-match \# 
comment ← and-match:
    thing-match \#*
    many-match: not-match: thing-match \#*
    thing-match \#*

poo ← string-match "* h"
file ← open "parse-test"
#print: parse comment file
print: parse poo file

#lots-of-abs ← or-match:
#    and-match:
#        lots-of-abs
#        thing-match \#b
#    thing-match \#a

#parsed ← apply-rule 'lots-of-abs (list \#a \#b \#b \#a \#b \#c): make-parse-state () ()
#print parsed.value


