join ← cons
first ← car
rest ← cdr

quoted ← '((... 'args) args)

list ← '((... args) args)

unary-λ ← quoted:
    ('args)
    oif (atom args):
        args ← list args
    quoted:
        (... 'code)
        list args @code

unary-\ ← unary-λ

not ← λx: oif x () 't

or ← λ(test ... 'xs):
    oif test:
        test
        oif xs: or *xs

is_old ← is
is ← λ(a b):
    or:
        a <<is_old>> b
        a <<binary-number-=>> b
 
#--------------------------------------------------------------#
print: quoted Cons car cdr and fn tests

print: car: 't :: ()

print: car: 
    (λb: 't :: b :: ()) 'a

print: car: cdr:
    ((λb: \a: a :: b :: ()) 't) 'b


#--------------------------------------------------------------#
print: quoted Scope and leaking tests

print: a ← 't

print: a
print: (λ('b) b) t
print: (λ('b) b): really a

b ← 'b
print: (λb b) 't

print: *((λa: leak a 'a) 'b :: ())

#--------------------------------------------------------------#
print: quoted oif tests

print: oif 'a 't 'a
print: oif () 'a 't

#--------------------------------------------------------------#
print: quoted Elipsis argument tests

print: car: (λ(... 'b) b) t e a q
print: car: car: (λ(... 'b) b): really: 't :: 'a :: ()

#--------------------------------------------------------------#
print: quoted Signal handling tests

print: with-signal-handler:
    \x: car x
    signal 't

#--------------------------------------------------------------#
print: quoted Info table tests

alice ← 'foo
print: not alice.betty

table-assign:
    betty
    info-table alice
    't

print: alice.betty


#--------------------------------------------------------------#
print: quoted Maths quiz

# look ma, no precedence!
print: (25 * 50 + 10) == 1500

#--------------------------------------------------------------#
print: quoted Strings and things

print: is \#a (string-first "ala bama")

foo ← file-open "afile"
print: is (file-get-char foo) \#a
